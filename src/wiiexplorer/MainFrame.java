/*
    Copyright 2012 The WiiExplorer team

    This file is part of WiiExplorer.

    WiiExplorer is free software: you can redistribute it and/or modify it under
    the terms of the GNU General Public License as published by the Free
    Software Foundation, either version 3 of the License, or (at your option)
    any later version.

    WiiExplorer is distributed in the hope that it will be useful, but WITHOUT ANY 
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
    FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along 
    with WiiExplorer. If not, see http://www.gnu.org/licenses/.
*/

package wiiexplorer;

import wiiexplorer.fileio.WiiIsoFilesystem;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import wiiexplorer.fileio.*;

public class MainFrame extends javax.swing.JFrame
{
    public MainFrame()
    {
        initComponents();
        
        archive = null;
        setTitle("WiiExplorer v1.0 by Mega-Mario");
        lblItemType.setText("");
        lblStatusLabel.setText("");
        treeNodes = new HashMap<>();
        selectedPath = "";
        
        ((DefaultTreeModel)tvFileView.getModel()).setRoot(new DefaultMutableTreeNode("(no file loaded)"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnOpenFile = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnNewFolder = new javax.swing.JButton();
        btnAddFileFolder = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        lblItemType = new javax.swing.JLabel();
        btnExtractItem = new javax.swing.JButton();
        btnReplaceItem = new javax.swing.JButton();
        btnRenameItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        lblStatusLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tvFileView = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("WiiExplorer");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnOpenFile.setText("Open...");
        btnOpenFile.setFocusable(false);
        btnOpenFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOpenFile);
        jToolBar1.add(jSeparator1);

        btnNewFolder.setText("Create folder");
        btnNewFolder.setEnabled(false);
        btnNewFolder.setFocusable(false);
        btnNewFolder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNewFolder.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFolderActionPerformed(evt);
            }
        });
        jToolBar1.add(btnNewFolder);

        btnAddFileFolder.setText("Add existing file/folder");
        btnAddFileFolder.setEnabled(false);
        btnAddFileFolder.setFocusable(false);
        btnAddFileFolder.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddFileFolder.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddFileFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFileFolderActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddFileFolder);
        jToolBar1.add(jSeparator2);

        lblItemType.setText("itemtype: ");
        jToolBar1.add(lblItemType);

        btnExtractItem.setText("Extract");
        btnExtractItem.setEnabled(false);
        btnExtractItem.setFocusable(false);
        btnExtractItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExtractItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExtractItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractItemActionPerformed(evt);
            }
        });
        jToolBar1.add(btnExtractItem);

        btnReplaceItem.setText("Replace");
        btnReplaceItem.setEnabled(false);
        btnReplaceItem.setFocusable(false);
        btnReplaceItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReplaceItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReplaceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceItemActionPerformed(evt);
            }
        });
        jToolBar1.add(btnReplaceItem);

        btnRenameItem.setText("Rename");
        btnRenameItem.setEnabled(false);
        btnRenameItem.setFocusable(false);
        btnRenameItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRenameItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRenameItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenameItemActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRenameItem);

        btnDeleteItem.setText("Delete");
        btnDeleteItem.setEnabled(false);
        btnDeleteItem.setFocusable(false);
        btnDeleteItem.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteItem.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteItem);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        lblStatusLabel.setText("status bar :D");
        getContentPane().add(lblStatusLabel, java.awt.BorderLayout.PAGE_END);

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tvFileView.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tvFileView.setShowsRootHandles(true);
        tvFileView.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tvFileViewValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tvFileView);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void trySave()
    {
        try 
        {
            archive.save();
        }
        catch (IOException ex)
        {
            lblStatusLabel.setText("Failed to save changes: "+ex.getMessage());
        }
    }
    
    
    // fun recursive function
    private void doFolderListing(FileTreeNode pnode, String parent)
    {
        String[] dummy = new String[0];
        String[] childdirs = archive.getDirectories(parent).toArray(dummy);
        String[] childfiles = archive.getFiles(parent).toArray(dummy);
        
        // sort!
        Arrays.sort(childdirs);
        Arrays.sort(childfiles);
        
        for (String dir : childdirs)
        {
            FileTreeNode tn = new FileTreeNode(archive, parent + "/" + dir);
            pnode.add(tn);
            treeNodes.put(parent + "/" + dir, tn);
            
            doFolderListing(tn, parent + "/" + dir);
        }
        
        for (String file : childfiles)
        {
            FileTreeNode tn = new FileTreeNode(archive, parent + "/" + file);
            pnode.add(tn);
            treeNodes.put(parent + "/" + file, tn);
        }
    }
    
    private void populateFSList()
    {
        treeNodes.clear();
        tvFileView.setCellRenderer(new FileTreeRenderer());
        
        DefaultTreeModel objlist = (DefaultTreeModel)tvFileView.getModel();
        String rootdir = archive.getRoot();
        FileTreeNode root = new FileTreeNode(archive, rootdir);
        objlist.setRoot(root);
        treeNodes.put(rootdir, root);
        
        doFolderListing(root, rootdir);
    }
    
    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOpenFileActionPerformed
    {//GEN-HEADEREND:event_btnOpenFileActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Open something interesting...");
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Supported file formats", /*"iso",*/ "rarc", "arc"));
        //fc.addChoosableFileFilter(new FileNameExtensionFilter("Wii ISO", "iso"));
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Wii RARC archive", "rarc", "arc"));
        String lastfile = Preferences.userRoot().get("lastFile", null);
        if (lastfile != null) fc.setSelectedFile(new File(lastfile));
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        String selfile = fc.getSelectedFile().getPath();
        Preferences.userRoot().put("lastFile", selfile);
        
        try { if (archive != null) archive.close(); }
        catch (IOException ex) {}
        archive = null;
        
        /*if (archive == null)
        {
            try { archive = new WiiIsoFilesystem(new ExternalFile(selfile)); }
            catch (IOException ex)
            {
                if (!ex.getMessage().startsWith("!File isn't "))
                {
                    lblStatusLabel.setText("Failed to open the file: "+ex.getMessage());
                    return;
                }
                archive = null;
            }
        }*/
        
        if (archive == null)
        {
            try { archive = new RarcFilesystem(new ExternalFile(selfile)); }
            catch (IOException ex)
            {
                if (!ex.getMessage().startsWith("!File isn't "))
                {
                    lblStatusLabel.setText("Failed to open the file: "+ex.getMessage());
                    return;
                }
                archive = null;
            }
        }
        
        populateFSList();
        lblStatusLabel.setText("");
        selectedPath = "";
        
        btnNewFolder.setEnabled(true);
        btnAddFileFolder.setEnabled(true);
        btnExtractItem.setEnabled(false);
        btnReplaceItem.setEnabled(false);
        btnRenameItem.setEnabled(false);
        btnDeleteItem.setEnabled(false);
    }//GEN-LAST:event_btnOpenFileActionPerformed

    private void btnNewFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNewFolderActionPerformed
    {//GEN-HEADEREND:event_btnNewFolderActionPerformed
        String thename = JOptionPane.showInputDialog(this, "Enter the name of the new folder:", "WiiExplorer", JOptionPane.QUESTION_MESSAGE);
        if (thename == null || thename.trim().isEmpty()) return;
        if (thename.contains("/") || thename.contains("\\"))
        {
            JOptionPane.showMessageDialog(this, "Invalid name entered. It must not contain slashes.", "WiiExplorer", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String pathtoaddin = selectedPath;
        if (pathtoaddin.isEmpty())
            pathtoaddin = archive.getRoot();
        else if (archive.fileExists(pathtoaddin)) 
            pathtoaddin = pathtoaddin.substring(pathtoaddin.lastIndexOf("/") + 1);
        String fullpath = pathtoaddin + "/" + thename;
        
        FileTreeNode pnode = treeNodes.get(pathtoaddin);
        FileTreeNode newnode = new FileTreeNode(archive, fullpath);
        int c;
        for (c = 0; c < pnode.getChildCount(); c++)
        {
            String thispath = (String)((FileTreeNode)pnode.getChildAt(c)).toString();
            if (thispath.compareTo(thename) >= 0) break;
        }

        pnode.insert(newnode, c);
        treeNodes.put(fullpath, newnode);
        
        DefaultTreeModel listmodel = (DefaultTreeModel)tvFileView.getModel();
        listmodel.nodesWereInserted(pnode, new int[] {c});
        
        archive.createDirectory(pathtoaddin, thename);
        trySave();
    }//GEN-LAST:event_btnNewFolderActionPerformed

    private void importDirectory(ExternalFilesystem fs, String destpath, String dir) throws IOException
    {
        String root = fs.getRoot() + "/";
        
        String[] dummy = new String[0];
        String[] childdirs = fs.getDirectories(root + dir).toArray(dummy);
        String[] childfiles = fs.getFiles(root + dir).toArray(dummy);
        
        Arrays.sort(childdirs);
        Arrays.sort(childfiles);
        
        for (String cdir : childdirs)
        {
            archive.createDirectory(destpath, cdir);
            importDirectory(fs, destpath + "/" + cdir, dir + "/" + cdir);
        }
        
        for (String cfile : childfiles)
        {
            FileBase thefile = fs.openFile(root + dir + "/" + cfile, "r");
            archive.createFile(destpath, cfile, thefile);
            thefile.close();
        }
    }
    
    private void btnAddFileFolderActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddFileFolderActionPerformed
    {//GEN-HEADEREND:event_btnAddFileFolderActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        fc.setDialogTitle("Choose a file or folder to import");
        String lastfile = Preferences.userRoot().get("lastFileAdded", null);
        if (lastfile != null) fc.setSelectedFile(new File(lastfile));
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        File selfile = fc.getSelectedFile();
        Preferences.userRoot().put("lastFileAdded", selfile.getPath());
        
        String pathtoaddin = selectedPath;
        if (pathtoaddin.isEmpty() || !archive.fileExists(pathtoaddin))
            pathtoaddin = archive.getRoot();
        else
            pathtoaddin = pathtoaddin.substring(pathtoaddin.lastIndexOf("/") + 1);
        
        if (selfile.isFile())
        {
            try
            {
                FileBase thefile = new ExternalFile(selfile.getPath(), "r");
                archive.createFile(pathtoaddin, selfile.getName(), thefile);
                trySave();
                thefile.close();
            }
            catch (IOException ex)
            {
                lblStatusLabel.setText("Failed to import the file: "+ex.getMessage());
            }
            
            String fullpath = pathtoaddin + "/" + selfile.getName();
            FileTreeNode pnode = treeNodes.get(pathtoaddin);
            FileTreeNode newnode = new FileTreeNode(archive, fullpath);
            int c;
            for (c = 0; c < pnode.getChildCount(); c++)
            {
                String thispath = (String)((FileTreeNode)pnode.getChildAt(c)).toString();
                if (thispath.compareTo(selfile.getName()) >= 0) break;
            }

            pnode.insert(newnode, c);
            treeNodes.put(fullpath, newnode);

            DefaultTreeModel listmodel = (DefaultTreeModel)tvFileView.getModel();
            listmodel.nodesWereInserted(pnode, new int[] {c});
        }
        else
        {
            try
            {
                ExternalFilesystem thefs = new ExternalFilesystem(selfile.getPath());
                archive.createDirectory(pathtoaddin, selfile.getName());
                importDirectory(thefs, pathtoaddin + "/" + selfile.getName(), "");
                trySave();
                thefs.close();
            }
            catch (IOException ex)
            {
                lblStatusLabel.setText("Failed to import the directory: "+ex.getMessage());
            }
            
            String fullpath = pathtoaddin + "/" + selfile.getName();
            FileTreeNode pnode = treeNodes.get(pathtoaddin);
            FileTreeNode newnode = new FileTreeNode(archive, fullpath);
            int c;
            for (c = 0; c < pnode.getChildCount(); c++)
            {
                String thispath = (String)((FileTreeNode)pnode.getChildAt(c)).toString();
                if (thispath.compareTo(selfile.getName()) >= 0) break;
            }
            
            doFolderListing(newnode, fullpath);

            pnode.insert(newnode, c);
            treeNodes.put(fullpath, newnode);

            DefaultTreeModel listmodel = (DefaultTreeModel)tvFileView.getModel();
            listmodel.nodesWereInserted(pnode, new int[] {c});
        }
    }//GEN-LAST:event_btnAddFileFolderActionPerformed

    private void extractDirectory(String dir, String outpath) throws IOException
    {
        File outdir = new File(outpath);
        outdir.mkdir();
        
        List<String> childdirs = archive.getDirectories(dir);
        List<String> childfiles = archive.getFiles(dir);
        
        for (String cdir : childdirs)
        {
            extractDirectory(dir + "/" + cdir, outpath + "/" + cdir);
        }
        
        for (String cfile : childfiles)
        {
            FileBase srcfile = archive.openFile(dir + "/" + cfile);
            FileBase dstfile = new ExternalFile(outpath + "/" + cfile, "rw");

            dstfile.setLength(srcfile.getLength());
            dstfile.setContents(srcfile.getContents());

            dstfile.save();
            dstfile.close();
            srcfile.close();
        }
    }
    
    private void btnExtractItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExtractItemActionPerformed
    {//GEN-HEADEREND:event_btnExtractItemActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Choose where to extract this item");
        String lastfile = Preferences.userRoot().get("lastFile", null);
        if (lastfile != null) fc.setSelectedFile(new File(new File(lastfile).getParentFile() + "/" + selectedPath.substring(selectedPath.lastIndexOf("/") + 1)));
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        File selfile = fc.getSelectedFile();
        if (selfile.exists())
        {
            if (JOptionPane.showConfirmDialog(this, "There is already an item with this name. Overwrite it?", "WiiExplorer", JOptionPane.YES_NO_OPTION)
                    != JOptionPane.YES_OPTION)
                return;
        }
        
        try
        {
            if (archive.fileExists(selectedPath))
            {
                FileBase srcfile = archive.openFile(selectedPath);
                FileBase dstfile = new ExternalFile(selfile.getPath(), "rw");
                
                dstfile.setLength(srcfile.getLength());
                dstfile.setContents(srcfile.getContents());
                
                dstfile.save();
                dstfile.close();
                srcfile.close();
                lblStatusLabel.setText("File extracted successfully.");
            }
            else
            {
                extractDirectory(selectedPath, selfile.getPath());
                lblStatusLabel.setText("Directory extracted successfully.");
            }
        }
        catch (IOException ex)
        {
            lblStatusLabel.setText("Extraction failed: "+ex.getMessage());
        }
    }//GEN-LAST:event_btnExtractItemActionPerformed

    private void setFileDescription(FileTreeNode tn)
    {
        String fullpath = (String)tn.getUserObject();
        selectedPath = fullpath;

        if (tn.isFile)
        {
            String[] sizeexts = {"kB", "MB", "GB"}; int e = 0;
            int filesize = archive.fileSize(fullpath);
            int sizeround = filesize;
            String sizeext = "bytes";
            if (sizeround == 1) sizeext = "byte";
            else while (sizeround >= 1000)
            {
                sizeround /= 1000;
                sizeext = sizeexts[e];
                e++;
                if (e >= 3) break;
            }

            lblStatusLabel.setText(String.format("%1$s -- %2$d %3$s%4$s",
                    fullpath, sizeround, sizeext, 
                    (sizeround == filesize) ? "" : String.format(" (%1$d byte%2$s)", filesize, (filesize==1)?"":"s")));
        }
        else
        {
            int ndirs = archive.getDirectories(fullpath).size();
            int nfiles = archive.getFiles(fullpath).size();

            // wee Acmlmboard style plurals
            lblStatusLabel.setText(String.format("%1$s -- %2$d element%7$s (%3$d director%5$s, %4$d file%6$s)", 
                    fullpath, ndirs+nfiles, ndirs, nfiles, (ndirs==1)?"y":"ies", (nfiles==1)?"":"s", ((ndirs+nfiles)==1)?"":"s"));
        }
    }
    
    private void tvFileViewValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_tvFileViewValueChanged
    {//GEN-HEADEREND:event_tvFileViewValueChanged
        boolean sel = true;
        
        TreePath path = tvFileView.getSelectionPath();
        TreeNode _tn = null;
        if (path == null) sel = false;
        else
        {
            _tn = (TreeNode)path.getLastPathComponent();
            if (_tn == null || _tn.getClass() != FileTreeNode.class) sel = false;
        }
        
        if (!sel)
        {
            lblStatusLabel.setText("");
            selectedPath = "";
            
            btnExtractItem.setEnabled(false);
            btnReplaceItem.setEnabled(false);
            btnRenameItem.setEnabled(false);
            btnDeleteItem.setEnabled(false);
        }
        else
        {
            FileTreeNode tn = (FileTreeNode)_tn;
            setFileDescription(tn);
            
            btnExtractItem.setEnabled(true);
            btnReplaceItem.setEnabled(tn.isFile);
            btnRenameItem.setEnabled(true);
            btnDeleteItem.setEnabled(!selectedPath.equals(archive.getRoot()));
        }
    }//GEN-LAST:event_tvFileViewValueChanged

    private void btnReplaceItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnReplaceItemActionPerformed
    {//GEN-HEADEREND:event_btnReplaceItemActionPerformed
        if (!archive.fileExists(selectedPath))
            throw new UnsupportedOperationException("oops, bug");
        
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Choose a file to import");
        String lastfile = Preferences.userRoot().get("lastFileReplaced", null);
        if (lastfile != null) fc.setSelectedFile(new File(lastfile));
        if (fc.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        String selfile = fc.getSelectedFile().getPath();
        Preferences.userRoot().put("lastFileReplaced", selfile);
        
        try
        {
            FileBase srcfile = new ExternalFile(selfile, "r");
            FileBase dstfile = archive.openFile(selectedPath);

            dstfile.setLength(srcfile.getLength());
            dstfile.setContents(srcfile.getContents());

            dstfile.save();
            trySave();
            dstfile.close();
            srcfile.close();
        }
        catch (IOException ex)
        {
            lblStatusLabel.setText("Failed to replace file: "+ex.getMessage());
        }
        
        setFileDescription(treeNodes.get(selectedPath));
    }//GEN-LAST:event_btnReplaceItemActionPerformed

    private void btnRenameItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRenameItemActionPerformed
    {//GEN-HEADEREND:event_btnRenameItemActionPerformed
        String thename = JOptionPane.showInputDialog(this, "Enter the new name for the item:", "WiiExplorer", JOptionPane.QUESTION_MESSAGE);
        if (thename == null || thename.trim().isEmpty()) return;
        if (thename.contains("/") || thename.contains("\\"))
        {
            JOptionPane.showMessageDialog(this, "Invalid name entered. It must not contain slashes.", "WiiExplorer", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (archive.fileExists(selectedPath))
            archive.renameFile(selectedPath, thename);
        else
            archive.renameDirectory(selectedPath, thename);
        
        FileTreeNode tn = treeNodes.get(selectedPath);
        treeNodes.remove(selectedPath);
        selectedPath = selectedPath.substring(0, selectedPath.lastIndexOf("/") + 1) + thename;
        tn.setUserObject(selectedPath);
        treeNodes.put(selectedPath, tn);
        
        DefaultTreeModel listmodel = (DefaultTreeModel)tvFileView.getModel();
        listmodel.nodeChanged(tn);
        
        setFileDescription(tn);
        trySave();
    }//GEN-LAST:event_btnRenameItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteItemActionPerformed
    {//GEN-HEADEREND:event_btnDeleteItemActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Really delete this item?", "WiiExplorer", JOptionPane.YES_NO_OPTION)
                != JOptionPane.YES_OPTION)
            return;
        
        if (archive.fileExists(selectedPath))
            archive.deleteFile(selectedPath);
        else
            archive.deleteDirectory(selectedPath);
        
        FileTreeNode tn = treeNodes.get(selectedPath);
        int rindex = tn.getParent().getIndex(tn);
        treeNodes.remove(selectedPath);
        
        List<String> toremove = new ArrayList<>();
        for (String k : treeNodes.keySet())
        {
            if (k.startsWith(selectedPath))
                toremove.add(k);
        }
        
        for (String k : toremove)
            treeNodes.remove(k);
        
        DefaultTreeModel listmodel = (DefaultTreeModel)tvFileView.getModel();
        listmodel.nodesWereRemoved(tn.getParent(), new int[] {rindex}, null);
        
        trySave();
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    public FilesystemBase archive;
    public HashMap<String, FileTreeNode> treeNodes;
    public String selectedPath;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddFileFolder;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnExtractItem;
    private javax.swing.JButton btnNewFolder;
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnRenameItem;
    private javax.swing.JButton btnReplaceItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel lblItemType;
    private javax.swing.JLabel lblStatusLabel;
    private javax.swing.JTree tvFileView;
    // End of variables declaration//GEN-END:variables
}
